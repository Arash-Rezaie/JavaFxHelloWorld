import java.nio.file.Files
import java.nio.file.Paths

// Please read this file
/*
There are two approach to import javafx dependencies in this file:
1. via plugin
2. via direct dependency

Also your project could be modular or non-modular.
If There is a file named "module-info.java", project will become modular

!!You should use only one of theme!!
*/
plugins {
    // generic
    id 'java' //adds Java compilation along with testing and bundling capabilities
    id 'application' //facilitates creating an executable JVM application (Tasks>application>run)

    // comment if you want to import dependencies directly
    id "org.openjfx.javafxplugin" version "0.0.10"

    // use below one of below plugins when you want to build by jpackage tool in java 14
    id "org.beryx.jlink" version "2.23.8" // for modular projects
    // id 'org.beryx.runtime' version '1.12.4' // for non-modular projects
}

// comment to integrate dependencies directory
javafx {
    // uncomment this line to determine a version
    //version = "16"
    modules("javafx.controls", "javafx.fxml")
}

// project properties
group 'com.arash'
version '1.0-SNAPSHOT'
description 'HelloWorld JavaFX project'

// target version
targetCompatibility = 1.9
sourceCompatibility = 1.9

// target file name suffix
String fileSuffix
def currentOs = org.gradle.internal.os.OperatingSystem.current()

if (currentOs.windows) {
    fileSuffix = 'windows'
} else if (currentOs.linux) {
    fileSuffix = 'linux'
} else if (currentOs.macOsX) {
    fileSuffix = 'macintosh'
}

application {
    mainClassName = 'com.arash.Main'
    applicationName = 'JavaFx Hello World'
}

// desired repositories
repositories {
    mavenCentral()
}

//platform dependent libs
dependencies {
    // uncomment for direct dependency integration
    // implementation "org.openjfx:javafx-base:16:${fileSuffix}"
    // implementation "org.openjfx:javafx-controls:16:${fileSuffix}"
    // implementation "org.openjfx:javafx-graphics:16:${fileSuffix}"
    // implementation "org.openjfx:javafx-fxml:16:${fileSuffix}"
}

// determine launcher class
mainClassName = group + '.Main'

// for fat-jar with no structure
/*
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    baseName = project.name + '_all_' + fileSuffix
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/

// for separated jars. all dependencies go to "libs" dir
/*
task copyDepsBeside(type: Jar) {

    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Class-Path': configurations.runtimeClasspath.collect { "libs/$it.name" }.join(' ')
        )
    }
    baseName = project.name + 'beside_all_' + fileSuffix
    with jar
    doLast {
        File libsDir = new File("$project.buildDir/libs/libs")
        if (!libsDir.exists())
            libsDir.mkdirs()
        configurations.runtimeClasspath.collect {
            if (it.isDirectory()) {
                it
            } else {
                File f = new File(libsDir, it.getName())
                if (!f.exists())
                    Files.copy(Paths.get(it.getAbsolutePath()), Paths.get(f.getAbsolutePath()))
            }
        }
    }
}
/*

//for non-modular project by jpackage tool
/*
runtime {
    addOptions("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages")
    // targetPlatform('lin')

    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        imageOptions += ['--icon', "src/main/resources/images/ic.png"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Arash Apps']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}*/

jlink {
    addOptions("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages")
    // targetPlatform('lin')

    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        imageOptions += ['--icon', "src/main/resources/images/ic.png"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Arash Apps']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }

    }
}
